class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices)==0 or len(prices)== 1:
            return 0
        
        right=[0]*len(prices)
        max_right=prices[-1]
        for i in range(len(prices)-2, -1,-1):
            max_right=max(prices[i], max_right)
            right[i]=max(right[i+1], max_right-prices[i])
        left=[0]*len(prices)
        min_left=prices[0]
        for j in range(1,len(prices)):
            min_left=min(min_left, prices[j])
            left[j]=max(left[j-1], prices[j]-min_left)
        profit=0
        for k in range(len(prices)):
            profit=max(profit, left[k]+right[k])   
        return profit
            
#generalized DP solution with k transactions:
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/135704/Detail-explanation-of-DP-solution

hashmap={}
        for i in range(len(nums)):
            complement= target-nums[i]
            #if hashmap.has_key(complement): this is invalid
            
            if complement in hashmap:
                return [hashmap.get(complement),i]
            hashmap[nums[i]]= i
            
 # The following code would not work for [3,3]:
   def twoSum(self, nums: List[int], target: int) -> List[int]:
        htable={}
        for index in range(len(nums)):
            htable[nums[index]]=index
        for val in htable:
            if target-val in htable and htable.get(target-val)!=htable.get(val):
                return htable[val], htable[target-val] 
              
C++:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map <int, int> hash;
        vector <int> result;
        for (int i = 0; i< nums.size(); i++){
            int tar = target - nums[i];
            
            if (hash.find(tar)!= hash.end()){
                result.push_back(hash[tar]);
                result.push_back(i);
                return result;
            }
            else{
                hash[nums[i]] = i;
            }
                
        }
        return result;
    }
};

or traversing using an iterator like follows:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hash;
        for (auto i = nums.begin(); i < nums.begin()+nums.size(); i++){
            int tar = target - *i;
            if (hash.find(tar)!= hash.end()){
                return {hash[tar], i - nums.begin()};
            }
            else{
                hash[*i] = i- nums.begin();
            }
        }
        return {};
    }
};

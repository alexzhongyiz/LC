My relatively time consuming solution, idea is to record the longest horizotal and vertical stream of 1s ending at (i,j) at each i,j in the 2D array hv[i][j]
For each (i,j) count the number of matrices with horizontal width k (k<=hv[i][j][0]) that has lower right corner at i,j. The idea is to check the horizontal longest 
stream of 1s for every element starting from i,j and going upwards (v,j) namely check hv[v][j][0]. As long as hv[v][j][0] >=k, we know we can form a new k by (i-v+1) matrix, 
thus add 1.


def numSubmat(self, mat: List[List[int]]) -> int:
        hv = [[0]*len(mat[0]) for _ in range(len(mat))]
        #print(hv)     
        M,N = len(mat),len(mat[0])
        for i in range(M):
            for j in range(len(mat[0])):
                if mat[i][j] == 1:
                    
                    a = hv[i][j-1][0] +1 if j >0 else 1
                    b= hv[i-1][j][1]+ 1 if i > 0 else 1
                    hv[i][j] = (a,b)
                else:
                    hv[i][j] = (0,0)
        #print(hv)
        res = 0 
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                #print(i,j)
                if hv[i][j]!= (0,0):
                    for k in range(1,hv[i][j][0]+1):
                        #print("k= ",k)
                        v = i
                        while v>=0 and hv[v][j][0]>=k:
                            res += 1
                            v -=1
                        #print("res:", res)
        return res     

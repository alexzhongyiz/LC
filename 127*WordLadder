#BFS one way:


from collections import defaultdict
class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):

        if endWord not in wordList or not endWord or not beginWord or not wordList:
            return 0
            
        L = len(beginWord)

        # Dictionary to hold combination of words that can be formed,
        # from any given word. By changing one letter at a time.
        all_combo_dict = defaultdict(list)
        for word in wordList:
            for i in range(L):
                # Key is the generic word
                # Value is a list of words which have the same intermediate generic word.
                all_combo_dict[word[:i] + "*" + word[i+1:]].append(word)


        # Queue for BFS
        queue = [(beginWord, 1)]
        # Visited to make sure we don't repeat processing same word.
        visited = {beginWord: True}
        while queue:
            current_word, level = queue.pop(0)      
            for i in range(L):
                # Intermediate words for current word
                intermediate_word = current_word[:i] + "*" + current_word[i+1:]

                # Next states are all the words which share the same intermediate state.
                for word in all_combo_dict[intermediate_word]:
                    # If at any point if we find what we are looking for
                    # i.e. the end word - we can return with the answer.
                    if word == endWord:
                        return level + 1
                    # Otherwise, add it to the BFS Queue. Also mark it visited
                    if word not in visited:
                        visited[word] = True
                        queue.append((word, level + 1))
                all_combo_dict[intermediate_word] = []
        return 0





#BFS two way
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if not wordList or not beginWord or not endWord or endWord not in wordList:
            return 0
        L = len(beginWord)
        linkage = defaultdict(list)
        for word in wordList:
            for i in range(L):
                link = word[:i] + '*' + word[i+1:]
                linkage[link].append(word)   
            
        queue1 = [(beginWord, 1)]
        queue2 = [(endWord, -1)]
        visited = {beginWord: 1, endWord: -1}
        while queue1 and queue2:
            cur1, level1 = queue1.pop(0)
            cur2, level2 = queue2.pop(0)
            for i in range(L):
                link1 = cur1[:i] +'*' + cur1[i+1:]
                for word in linkage[link1]:
                    if word in visited and visited[word] * level1 < 0:
                        return level1- visited[word]
                    elif word not in visited:
                        visited[word] = level1 + 1
                        queue1. append((word,level1 + 1))
            for j in range(L):
                link2 = cur2[:j] + '*' + cur2[j+1:]
                for word in linkage[link2]:
                    if word in visited and visited[word] * level2 < 0:
                        return visited[word] - level2
                    elif word not in visited:
                        visited[word] = level2 - 1
                        queue2.append((word, level2 - 1))
        return 0
                     

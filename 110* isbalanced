needless to say, this gives the best explanation:
https://leetcode.com/problems/balanced-binary-tree/discuss/157645/Python-Tree-tm

This is also great thought process:
https://leetcode.com/problems/balanced-binary-tree/discuss/254230/Thinking-process-of-bottom-up-solution

to copy: 
#1 O(nlogn):
class Solution(object):
    def isBalanced(self, root):
        if not root: return True
        left = self.get_height(root.left)
        right = self.get_height(root.right)
        if abs(left - right) > 1: 
            return False  
        return self.isBalanced(root.left) and self.isBalanced(root.right)

        
    def get_height(self, root):
        if not root: return 0
        left = self.get_height(root.left)
        right = self.get_height(root.right)
        return max(left, right) + 1
        
#2:O(N) with global variable:


class Solution(object):
    def isBalanced(self, root):
        self.isBalanced = True
        self.getHeight(root)
        return self.isBalanced
        
    
    def getHeight(self, root):
        if not root: return 0
        left = self.getHeight(root.left)
        right = self.getHeight(root.right)
        if abs(left - right) > 1: 
            self.isBalanced = False
        return max(left, right) + 1
        
        
#3: similar idea, use -1 to denote false:

class Solution(object):
    def isBalanced(self, root):
        height = self.get_height(root)
        return height != -1

        
    def get_height(self, root):
        if not root: return 0
        left = self.get_height(root.left)
        right = self.get_height(root.right)
        if left == -1 or right == -1 : return -1          
        if abs(left - right) > 1:  return -1
        return max(left, right) + 1
        
#4: still with global variable, just easier to understand:

def isBalanced(self, root: 'TreeNode') -> 'bool':
    self.balanced = True
    
    def dfs(node):
        if not node:
            return 0
        left = dfs(node.left)
        right = dfs(node.right)
        if not self.balanced or abs(left - right) > 1:
            self.balanced = False
        return max(left, right) + 1
    
    dfs(root)
    return self.balanced
    
    
    

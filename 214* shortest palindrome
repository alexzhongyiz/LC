First try is TLE solution (O(n2)):

        # find the longest palindrome already in the string that starts with the first char then reverse add whatever is left afterwards
        #eg. abbacbc. the longest starting with the first letter a is abba. then add cbc in front.
        longest = 0
        for i in range(len(s)):
            if self.help(s,0,i):
                longest = i
                
        #print("up to longest: ", s[:longest+1])
        return s[longest+1:len(s)][::-1]+s
                
                
    def help(self,s,l,r):
        while s[l] == s[r] and l < r-1:
            l += 1
            r -=1
        if l == r:
            return True
        elif l == r-1 and s[l] == s[r]:
            return True
        else:
            return False
            
 The above solution starts from the shortest and searches up, which is a waste of time, what if we test if palindrome from the longest and goes down:
 
        if len(s) ==0:
            return s
        longest = 0
        v = s[::-1]
        n = len(s)
        for i in range(n,0,-1):
            if s[:i] == v[n-i:n]: break
        s = v[:n-i] + s
        return s
            
            
   KMP algo (O(n)):        
   

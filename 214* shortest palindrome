First try is TLE solution (O(n2)):

        # find the longest palindrome already in the string that starts with the first char then reverse add whatever is left afterwards
        #eg. abbacbc. the longest starting with the first letter a is abba. then add cbc in front.
        longest = 0
        for i in range(len(s)):
            if self.help(s,0,i):
                longest = i
                
        #print("up to longest: ", s[:longest+1])
        return s[longest+1:len(s)][::-1]+s
                
                
    def help(self,s,l,r):
        while s[l] == s[r] and l < r-1:
            l += 1
            r -=1
        if l == r:
            return True
        elif l == r-1 and s[l] == s[r]:
            return True
        else:
            return False
            
 The above solution starts from the shortest and searches up, which is a waste of time, what if we test if palindrome from the longest and goes down:
 
        if len(s) ==0:
            return s
        longest = 0
        v = s[::-1]
        n = len(s)
        for i in range(n,0,-1):
            if s[:i] == v[n-i:n]: break
        s = v[:n-i] + s
        return s
            
            
   KMP algo (O(n)):        
   explanations: https://leetcode.com/problems/shortest-palindrome/discuss/60113/Clean-KMP-solution-with-super-detailed-explanation
   https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/
   In the following code, index is like j in the geeks explanation above.
        if len(s) == 0:
            return s
        st = s + "#" + s[::-1]
        
        lp = [0]*len(st)
        index = 0
        for i in range(1,len(st)):
            if st[i] == st[index]:
                index += 1
                #lp[i] = lp[i-1] + 1 (this is incorrect)
                lp[i]  = lp[index] 
                
            else:
                while index > 0 and st[i]!= st[index]:
                    index = lp[index -1]
                if st[i] == st[index]:
                    index += 1
                    lp[i] = index
                    #lp[i] = lp[i-1]+1
                else:
                    
                    lp[i] = 0
        #print(lp)
        return s[lp[-1]:][::-1]+s

First solution: wrong answer
def maxProduct(self, nums: List[int]) -> int:
        if not nums:
            return 0
        pos, neg = [],[]
        
        for k in range(len(nums)):
            num = nums[k]
            if num == 0:
                pos.append(0)
                neg.append(0)
            if num > 0:
                if pos and pos[k -1]!= 0:
                    pos.append(pos[k -1]*num)
                else:
                    pos.append(num)
                #ans = max(ans, pos[-1])
                if neg and neg[ k -1]!= 0:
                    neg.append(neg[k -1]*num)
                else:
                    neg.append(0)
            if num < 0:
                if pos and pos[k -1]!= 0:
                    neg.append(pos[k -1] * num)
                else:
                    neg.append(num)
                if neg and neg[k -1]!= 0:
                    pos.append(neg[k -1]* num)
                else:
                    pos.append(0)
        print(pos, neg)
        return max(pos)
        
        
 Second attempt correct:
 O(n)time and O(n)space.
 def maxProduct(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        elif len(nums) == 1:
            return nums[0]
        
        else:
            
            m, M = [0]*len(nums), [0]*len(nums)
            ans = m[0] = M[0] = nums[0]
            for i in range(1,len(nums)):
                if nums[ i -1] == 0:
                    m[i] = M[i] = nums[i]
                    
                elif nums[i] > 0:
                    M[i] = nums[i] * max(M[i-1], 1)
                    m[i] = nums[i] * min(m[i-1], 1)
                    
                else:
                    M[i] = nums[i]* min(m[i-1], 1)
                    m[i] = nums[i]* max(M[i-1], 1)
                ans = max(ans, M[i])
            #print(M, m)
            return ans
             
  Can make it O(1) space: just write m, M instead of arrays.
  
  

    #inspired by solution
    def longestPalindrome(self, s: str) -> str:
        res = ''
        for i in range(len(s)):
            cur = self.helper(s, i, i)
            if len(cur) > len(res):
                res = cur
                
        for i in range(len(s)):
            cur = self.helper(s, i, i + 1)
            if len(cur) > len(res):
                res = cur
        return res
    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1: r]
# or can shorten the main function by using max:
for i in range(len(s)):
            res = max(self.helper(s,i,i), self.helper(s,i,i+1), res, key=len)

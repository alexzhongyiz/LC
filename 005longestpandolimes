    #inspired by solution
    def longestPalindrome(self, s: str) -> str:
        res = ''
        for i in range(len(s)):
            cur = self.helper(s, i, i)
            if len(cur) > len(res):
                res = cur
                
        for i in range(len(s)):
            cur = self.helper(s, i, i + 1)
            if len(cur) > len(res):
                res = cur
        return res
    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1: r]
# or can shorten the main function by using max:
for i in range(len(s)):
            res = max(self.helper(s,i,i), self.helper(s,i,i+1), res, key=len)


#the fastest seems here, where each time you add one more character to the string, your longest palindrome could at most increase
#by 1 or 2. 

def longestPalindrome(self, s: str) -> str:
        if len(s)==0:
        	return ""
        maxLen=1
        start=0
        for i in range(len(s)):
        	if i-maxLen >=1 and s[i-maxLen-1:i+1]==s[i-maxLen-1:i+1][::-1]:
        		start=i-maxLen-1
        		maxLen+=2
        		continue

        	if i-maxLen >=0 and s[i-maxLen:i+1]==s[i-maxLen:i+1][::-1]:
        		start=i-maxLen
        		maxLen+=1
        return s[start:start+maxLen]

#need to do in O(log(m+n)) time
def findMedianSortedArrays(self, A, B):
    l = len(A) + len(B)
    if l % 2 == 1:
        return self.kth(A, B, l // 2)
    else:
        return (self.kth(A, B, l // 2) + self.kth(A, B, l // 2 - 1)) / 2.   
    
def kth(self, a, b, k):
    if not a:
        return b[k]
    if not b:
        return a[k]
    ia, ib = len(a) // 2 , len(b) // 2
    ma, mb = a[ia], b[ib]
    
    # when k is bigger than the sum of a and b's median indices 
    if ia + ib < k:
        # if a's median is bigger than b's, b's first half doesn't include k
        if ma > mb:
            return self.kth(a, b[ib + 1:], k - ib - 1)
        else:
            return self.kth(a[ia + 1:], b, k - ia - 1)
    # when k is smaller than the sum of a and b's indices
    else:
        # if a's median is bigger than b's, a's second half doesn't include k
        if ma > mb:
            return self.kth(a[:ia], b, k)
        else:
            return self.kth(a, b[:ib], k)


#my code:

m, n = len(nums1), len(nums2)
        #we would like to find the (m+n)//2 th and (m+n)//2 + (1+ m+n)%2 th number then do average
        
        
        def findnumber(A, B, k):
            if len(A)> len(B):
                A, B = B,A   #this is crucial as it saves a lot of code later on.
            if not A:
                return B[k - 1]
            
            m, n = len(A), len(B)
            if k==1:
                return min (A[0], B[0])
            a = min(len(A) - 1, k //2 - 1)
            b = k - a - 2
            if A[a]== B[b]:
                return A[a]
            elif A[a] < B[b]:
                return findnumber(A[a + 1:], B, k - a - 1)
            else:
                return findnumber(A, B[b+1:], k - b -1 )
        
        return (findnumber(nums1, nums2, (m + n + 1)//2) + findnumber(nums1, nums2, (m+n+ 1)//2 + (m+n+1)%2 ))/2

#using recursion:
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        else:
            
            res = self.inorderTraversal(root.left)
            res.extend([root.val])
            res.extend(self.inorderTraversal(root.right))
            return res
            
            
 #using Stack: by 公瑾
 def inorderTraversal(self, root):
        res, stack = [], []
        while stack or root:
            if root:
                stack.append(root)
                root = root.left
            else:
                node = stack.pop()
                res.append(node.val)
                root = node.right
        return res
  
  #my own code using stack:
  
  class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return  []
        stack, res = [root],[]

        while stack:
            root = stack.pop()
            if root.left and root.left not in res:

                if root.right:
                    stack.append(root.right)
                stack.append(root)
                if root.left:
                    stack.append(root.left)
            else:
                res.append(root)
                if root.right and root.right not in stack:
                    stack.append(root.right)



        return [node.val for node in res]
    
        
 #Morris Traversal:
 
 res = []
        while root:
            if not root.left:
                res.append(root.val)
                root = root.right
            else:
                pred = root.left
                while pred.right and pred.right != root:
                    pred = pred.right
                if not pred.right:
                    pred.right = root
                    root = root.left
                else:
                    pred.right = None
                    res.append(root.val)
                    root = root.right

        return res

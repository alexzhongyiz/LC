understand the problem. Start from the boundary 
dfs solution:

class Solution:
    def solve(self, board: List[List[str]]) -> None:
       
        def dfs(x,y): 
            if x < 0 or x >= M or y < 0 or y>= N:
                return 
            if board[x][y] == "O":
                board[x][y] = 'N'
                dfs(x - 1, y)
                dfs(x + 1, y)
                dfs(x, y -1 )
                dfs(x, y + 1)
        if len(board) == 0 or len(board[0]) == 0:
            return
        M,N = len(board), len(board[0])
        boundary = [(0,k) for k in range(N)] + [(M - 1, k) for k in range(N)] + \
        [(j, 0) for j in range(1, M-1)] + [(j, N - 1) for j in range(1,M - 1)]
        
        for x, y in boundary:
            dfs(x,y)
        
        for x in range(M):
            for y in range(N):
                if board[x][y] == 'O':
                    board[x][y] = 'X'
                if board[x][y] =='N':
                    board[x][y] = 'O'
                    
                    
 #bfs solution:
 class Solution:
    def solve(self, board: List[List[str]]) -> None:
       
        def bfs(queue): 
            x, y  = queue.pop(0)
            if x < 0 or x >= M or y < 0 or y>= N:
                return 
            if board[x][y] == "O":
                board[x][y] = 'N'
                queue.extend([(x-1, y), (x + 1, y), (x, y - 1), (x, y + 1)])
            while queue:
                bfs(queue)
                
        if len(board) == 0 or len(board[0]) == 0:
            return
        M,N = len(board), len(board[0])
        boundary = [(0,k) for k in range(N)] + [(M - 1, k) for k in range(N)] + \
        [(j, 0) for j in range(1, M-1)] + [(j, N - 1) for j in range(1,M - 1)]
        
        for x, y in boundary:
            queue = [(x, y)]
            bfs( queue)
        
        for x in range(M):
            for y in range(N):
                if board[x][y] == 'O':
                    board[x][y] = 'X'
                if board[x][y] =='N':
                    board[x][y] = 'O'
##########################################        
##### Union Find solution#################
def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        ### Union find solution
        land = set()
        for i in range(len(board)):
            for j in range(len(board[i])):
                if board[i][j] == "O":
                    land.add((i,j))
        self.parents = collections.defaultdict()
        self.size = collections.defaultdict(int)
        self.isBound = collections.defaultdict(bool)
        
        def isbound(tup):
            r,c = tup
            return True if r == 0 or r == len(board) -1 or c == 0 or c== len(board[0]) - 1 else False
        
        for i,j in land:
            self.parents[(i,j)] = (i,j)
            self.size[(i,j)] = 1  
            self.isBound[(i,j)] = isbound((i,j)) 
          
        #need to worry about the surrounding     
        def find(n):
            if n != self.parents[n]:
                self.isBound[self.parents[n]] |= self.isBound[n]
                self.parents[n] = find(self.parents[n])
                
            return self.parents[n]
           
        def union(n1,n2):
            r1,r2 = find(n1), find(n2)
            if r1 != r2:
                if self.size[r1] < self.size[r2]:
                    r1,r2 = r2,r1
                self.parents[r2] = r1
                self.size[r1] = self.size[r2] + self.size[r1]
                self.isBound[r1] |= self.isBound[r2]
        
        for i,j in land:
            
            for v, h in [[-1,0],[1,0],[0,-1],[0,1]]:
                if (i+v,j+h) in land:
                    union((i,j),(i+v,j+h))
        
        #print(self.parents,self.isBound)
        #remove those without boundary
        for i,j in land:
            root = find((i,j))
            #print(i,j,root)
            if not self.isBound[root]:
                board[i][j] ="X"
        
                
        

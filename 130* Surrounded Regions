understand the problem. Start from the boundary 
dfs solution:

class Solution:
    def solve(self, board: List[List[str]]) -> None:
       
        def dfs(x,y): 
            if x < 0 or x >= M or y < 0 or y>= N:
                return 
            if board[x][y] == "O":
                board[x][y] = 'N'
                dfs(x - 1, y)
                dfs(x + 1, y)
                dfs(x, y -1 )
                dfs(x, y + 1)
        if len(board) == 0 or len(board[0]) == 0:
            return
        M,N = len(board), len(board[0])
        boundary = [(0,k) for k in range(N)] + [(M - 1, k) for k in range(N)] + \
        [(j, 0) for j in range(1, M-1)] + [(j, N - 1) for j in range(1,M - 1)]
        
        for x, y in boundary:
            dfs(x,y)
        
        for x in range(M):
            for y in range(N):
                if board[x][y] == 'O':
                    board[x][y] = 'X'
                if board[x][y] =='N':
                    board[x][y] = 'O'
                    
                    
 #bfs solution:
 class Solution:
    def solve(self, board: List[List[str]]) -> None:
       
        def bfs(queue): 
            x, y  = queue.pop(0)
            if x < 0 or x >= M or y < 0 or y>= N:
                return 
            if board[x][y] == "O":
                board[x][y] = 'N'
                queue.extend([(x-1, y), (x + 1, y), (x, y - 1), (x, y + 1)])
            while queue:
                bfs(queue)
                
        if len(board) == 0 or len(board[0]) == 0:
            return
        M,N = len(board), len(board[0])
        boundary = [(0,k) for k in range(N)] + [(M - 1, k) for k in range(N)] + \
        [(j, 0) for j in range(1, M-1)] + [(j, N - 1) for j in range(1,M - 1)]
        
        for x, y in boundary:
            queue = [(x, y)]
            bfs( queue)
        
        for x in range(M):
            for y in range(N):
                if board[x][y] == 'O':
                    board[x][y] = 'X'
                if board[x][y] =='N':
                    board[x][y] = 'O'
        

#DFS, everytime reaches outof boundary, simply return nothing, and change the land to some other symbol '#'
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:return 0
        height, length = len(grid), len(grid[0])
        count = 0
        for i in range(height):
            for j in range(length):
                if grid[i][j] == "1":
                    self.dfs(i, j,grid)
                    count += 1
                
        return count            
                    
    def dfs(self, i,j, grid):
        if i < 0 or i >= len(grid) or j < 0 or j>= len(grid[0]) or grid[i][j] != "1":
            return
        grid[i][j] = "#"
        self.dfs(i - 1, j, grid)
        self.dfs(i + 1, j, grid)
        self.dfs(i, j - 1, grid)
        self.dfs(i, j + 1, grid)
        
        
 # without modification: use another matrix named visited to remember if we have visited:
 
 def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:return 0
        
        visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid)) ]
        count = 0
            
        def dfs(i, j, visited, grid):
            if i < 0 or i >= len(grid) or j < 0 or j>= len(grid[0]) or grid[i][j] != "1" or visited[i][j]:
                return 
            
            visited[i][j] = True
            dfs(i - 1, j, visited, grid)
            dfs(i + 1, j, visited, grid)
            dfs(i, j- 1, visited, grid)
            dfs(i, j + 1, visited, grid)
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if not visited[i][j] and grid[i][j] == "1":
                    dfs(i,j, visited, grid)
                    count += 1
                
        return count   
        
        

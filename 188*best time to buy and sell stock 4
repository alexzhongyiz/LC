first attempt, O(n^2), TLE
def maxProfit(self, k: int, prices: List[int]) -> int:
        if not prices:
            return 0
        
        dp = [[0]* (k+1) for _ in range(len(prices))]
        
        for i in range(1, len(prices)):
            for l in range(1, k + 1):
                dp[i][l] =max(max(dp[j][l -1] + max(prices[i] - prices[j],0) for j in range(i)), dp[i-1][l])
                
        return dp[-1][k]
        
 Second Attemp: O(n) and O(N * k) space, Runtime Error when k>>len(prices):
 state machine.
 
 
 def maxProfit(self, k: int, prices: List[int]) -> int:
        if len(prices) <=1:
            return 0
            
        if k >= len(prices)//2: #this step is crucial when k is larger than needed.
            return sum(max(prices[i] - prices[i -1], 0) for i in range(1, len(prices)))
        
        cash = [[0]* (k+ 1) for _ in range(len(prices))]
        hold = [[0]*(k + 1) for _ in range(len(prices))]
        
        cash[1] = [0] + [max(prices[1] - prices[0], 0)]*k
        hold[0] = [-prices[0]] * (k + 1)
        
        for i in range(1, len(prices)):
            hold[i][0] = max(hold[i -1][0], -prices[i])
            for l in range(1, k + 1):
                hold[i][l] = max(hold[i -1][l], cash[i -1] [l] - prices[i])
                cash[i][l] = max(cash[i -1][l], hold[i -1][l -1] + prices[i])
        #print(cash)
        #print(hold)
        return cash[-1][k]

Notice that every time we finish with hold[i][l], we never use i any more, thus, we can only use 1-d lists of length (k+1):
here buy is the same as hold and sell is the same as cash
def maxProfit(self, k: int, prices: List[int]) -> int:
        if len(prices) <=1:
            return 0
        if k >= len(prices)//2:
            return sum(max(prices[i] - prices[i -1], 0) for i in range(1, len(prices)))
        
        #cash = [[0]* (k+ 1) for _ in range(len(prices))]
        #hold = [[0]*(k + 1) for _ in range(len(prices))]
    
        #cash[1] = [0] + [max(prices[1] - prices[0], 0)]*k
        #hold[0] = [-prices[0]] * (k + 1)
        
        sell = [0] + [max(prices[1] - prices[0], 0)]*k
        buy = [max(-prices[0], -prices[1])]* (k + 1)
        
        for i in range(1, len(prices)):
            #hold[i][0] = max(hold[i -1][0], -prices[i])
            buy[0] = max(buy[0], -prices[i])
            for l in range(1, k + 1):
                #hold[i][l] = max(hold[i -1][l], cash[i -1] [l] - prices[i])
                #cash[i][l] = max(cash[i -1][l], hold[i -1][l -1] + prices[i])
                buy[l] = max(buy[l], sell[l] - prices[i])
                sell[l] = max(sell[l], buy[l -1] + prices[i])
        #return cash[-1][k]
        return sell[k]
some of the top explanations are :
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/39608/A-clean-DP-solution-which-generalizes-to-k-transactions
state machine:
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/54150/State-machine-is-the-easiest-way-to-understand-stock-problem-could-solve-all-the-stock-problem-in-leetcode


#recursive as follows: the only reason that I need a helper function is because if the whole tree is empty, then it would return false 
automatically, regardless of whether sum is zero or not.

    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        if not root:
            return False
        
        return self.hasPathSum1(root, sum)
                
    def hasPathSum1(self, root, sum):
        if not root:
            return sum == 0
        if root.left and root.right:
            return self.hasPathSum1(root.left, sum - root.val) or self.hasPathSum1(root.right, sum - root.val)
        
        if not root.left:
            return self.hasPathSum1(root.right, sum - root.val)
        elif not root.right:
            return self.hasPathSum1(root.left, sum - root.val)
        
        
        
 #want iterative and stack:
 #this was emulating the pre-order traversal of BST, not efficient as left and right are assymmetric
class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        if not root:
            return False
        
        return self.hasPathSum1(root, sum)
                
    def hasPathSum1(self, root, sum):
        #if not root:
            #return sum == 0
        stack, visited_right, cur = [], {}, 0
        while root or stack:
            if root:
                cur += root.val
                stack.append((root, cur))
                root = root.left
            else:
                node, cur = stack[-1]
                if node.right:
                    if node not in visited_right:
                        root = node.right
                        visited_right[node] = True
                    else:
                        stack.pop()
                    
                else:
                    if node.left:
                        stack.pop()
                    
                    
                    else:
                        node, cur = stack.pop()
                        if cur == sum:
                            return True
                    
        return False
                
  #this is somewhat more symmetric:
  
      def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        if not root:
            return False
        node = root
        cur_sum = root.val
        
        stack = [(root, cur_sum)]
        #path = [(root,cur_sum)]
        while stack:
            if node.left and node.right:
                #if node != root:
                stack.append((node,cur_sum))
                prev = node
                node = node.left
                cur_sum += node.val
                prev.left = None
                print('current stack:')
                for i in stack:
                    print(i[0].val, i[1])
                #path.append(node)
            elif node.left:
                #prev = node
                node = node.left
                cur_sum += node.val
                #prev.left = None
                #path.append(node)
                
            elif node.right:
                #prev = node
                node = node.right
                cur_sum += node.val
                print('current stack:')
                for i in stack:
                    print(i[0].val, i[1])
            else:
                if cur_sum == sum: return True
                else: node, cur_sum = stack.pop(-1)

        return False
        
        #THE MOST EFFICIENT ALGORITHM WITH DFS IS FOLLOWS:
        
        # DFS with stack
def hasPathSum2(self, root, sum):
    if not root:
        return False
    stack = [(root, root.val)]
    while stack:
        curr, val = stack.pop()
        if not curr.left and not curr.right:
            if val == sum:
                return True
        if curr.right:
            stack.append((curr.right, val+curr.right.val))
        if curr.left:
            stack.append((curr.left, val+curr.left.val))
    return False

2d dp space Exceeds limit:

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        dp = [ [0]*len(nums) for _ in range(len(nums))]
        for i in range(len(nums)):dp[i][i] = nums[i]
        
        cnt = collections.Counter(nums)[k]
        #print(cnt)
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                dp[i][j] = dp[i][j-1] + nums[j]
                if dp[i][j] == k:
                    cnt +=1
        return cnt
        
        
1d dp still exceeds time limit ( O(n2) time)

def subarraySum(self, nums: List[int], k: int) -> int:
        dp = [0]*len(nums)
        cnt = 0
        for i in range(len(nums)):
            for j in range(i+1):
                dp[j] = dp[j] + nums[i]
                if dp[j]==k:
                    cnt += 1
        return cnt
        
The best answer uses different idea (accumulative sum + hash map).
            
            

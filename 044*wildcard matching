#double DP as the link:
#https://leetcode.com/problems/wildcard-matching/discuss/256025/Python-DP-with-illustration
  def isMatch(self, s, p):
        dp = [[False for _ in range(len(p)+1)] for i in range(len(s)+1)]
        dp[0][0] = True
        for j in range(1, len(p)+1):
            if p[j-1] != '*':
                break
            dp[0][j] = True
                
        for i in range(1, len(s)+1):
            for j in range(1, len(p)+1):
                if p[j-1] in {s[i-1], '?'}:
                    dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    dp[i][j] = dp[i-1][j-1] or dp[i-1][j] or dp[i][j-1]
        return dp[-1][-1]
        
        #or this slick one: https://yucoding.blogspot.com/2013/02/leetcode-question-123-wildcard-matching.html
        
        #my own DP:
     def isMatch(self, s, p):
            #dp[i][j] denote f(s[i:], p[j:])
        dp = [[False] * (len(s) + 1) for _ in range(len(p) + 1)] 
        dp[-1][-1] = True
        if not p: return not s
        
        for i in range( len(p) - 1, -1, -1):
            if p[i] == '*':
                dp[i][-1] = True
            else:
                break
        
        for i in range(len(p) - 1, -1, -1):
            
            for j in range(len(s) -1, -1, -1):
                firstmatch = p[i] == '?' or p[i] == s[j]
                if firstmatch:
                    dp[i][j] = dp[i + 1][j + 1] 
                elif p[i] == "*":
                    dp[i][j] = dp[i + 1][j] or dp[i][j+1]
        return dp[0][0]

# this requires using heapsort:
# detailed explanation: https://leetcode.com/problems/kth-largest-element-in-an-array/discuss/167837/Python-or-tm
#using Max heap:
import heapq
    def findKthLargest(self, nums: List[int], k: int) -> int:
        li = [-num for num in nums]
        heapq.heapify(li)
        for _ in range(k):
            res = heapq.heappop(li)
        return -res
      
#using min heap:

    import heapq
    def findKthLargest(self, nums: List[int], k: int) -> int:
        min_heap = [-float('inf')] * k
        heapq.heapify(min_heap)
        for num in nums:
            if num > min_heap[0]:
                heapq.heappop(min_heap)
                heapq.heappush(min_heap, num)
        return min_heap[0]
      
# O(n) time, quick selection
the algorithm can be found in https://www.geeksforgeeks.org/quickselect-algorithm/ or wikipedia
def findKthLargest(self, nums, k):
    # convert the kth largest to smallest
    return self.findKthSmallest(nums, len(nums)+1-k)
    
def findKthSmallest(self, nums, k):
    if nums:
        pos = self.partition(nums, 0, len(nums)-1)
        if k > pos+1:
            return self.findKthSmallest(nums[pos+1:], k-pos-1)
        elif k < pos+1:
            return self.findKthSmallest(nums[:pos], k)
        else:
            return nums[pos]
 
# choose the right-most element as pivot   
def partition(self, nums, l, r):
    low = l
    while l < r:
        if nums[l] < nums[r]:
            nums[l], nums[low] = nums[low], nums[l]
            low += 1
        l += 1
    nums[low], nums[r] = nums[r], nums[low]
    return low

#DP
def numDistinct(self, s: str, t: str) -> int:
        if len(s) < len(t):
            return 0
        dp = [[0]* (len(t) + 1)  for _ in range(len(s) + 1)]
              #dp[i][j] stands for all possible for s[:i] and t[:j]
        for i in range(len(s) + 1):
              dp[i][0] = 1
        
        for i in range(1, len(s) + 1):
            for j in range(1, len(t) + 1):
                if t[j - 1] == s[ i - 1]:
                    dp[i][j] = dp[ i - 1][j - 1] + dp[i - 1][j]
                else:
                    dp[i][j] = dp[i - 1][j]
              
        return dp[-1][-1]

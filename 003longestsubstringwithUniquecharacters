class Solution:
    # @return an integer
    def lengthOfLongestSubstring(self, s):
        start = maxLength = 0 #notice this
        usedChar = {}
        
        for i in range(len(s)):
        #string_list = list(s)
        #for i in string_list: this is also allowed
            if s[i] in usedChar and start <= usedChar[s[i]]:
                start = usedChar[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)

            usedChar[s[i]] = i

        return maxLength
        #above was a standard answer.
c++ my slow solution:
int lengthOfLongestSubstring(string s) {
        int start = 0;
        int res =0;
        map<char, int> maps;
        for (int i = 0; i< s.length(); i++){
            if (maps.find(s[i]) != maps.end() ) {
                start = max(maps[s[i]] + 1, start);
                for (char ch = 'a'; ch <='z'; ch ++){
                    if (maps.find(ch)!= maps.end() && maps[ch] <= maps[s[i]]){
                        maps.erase(ch);
                    }
                }
                
                
            }
            res = max(res, i - start + 1);
            maps[s[i]] = i;
            //cout<<"step "<<i<<" res: "<<res<<" start:"<<start<<endl;
        }
        return res;
    }
    
        int lengthOfLongestSubstring(string s) {
        int start = -1;
        int res =0;
        vector<int> maps(256, -1);
        // later maps['a'] would coorespond to maps[67]. this is -1 for the first element of s, else default would give 0 for maps[s[0]]
        
        for (int i = 0; i< s.length(); i++){
            //cout<<"maps[s[i]] "<<maps[s[i]]<<" "<<start<<endl;
            if (maps[s[i]] > start ) {
                start = maps[s[i]];    
            }
            res = max(res, i - start);
            maps[s[i]] = i;
            //cout<<"step "<<i<<" res: "<<res<<" start:"<<start<< " "<<maps[s[i]]<<endl;
            //cout<<s[i]<<maps[s[i]]<<start<<endl;
        }
        return res;
    }

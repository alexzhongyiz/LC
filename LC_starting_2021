0 denotes not understanding idea/optimal idea.

1. denotes understand idea but not finished with programming.
2. denotes understanding idea but couldn't implement independently yet.
3 denotes came up with not super good algo but passed.
4. denotes independendly implementing not too bad algo
5. denotes independently implemented near optimal idea.



005. 2 (210915)
214. 0 (210916) (KMP algo?)
516 2
647 4
055 5.
045. 4.
1306 5
1871.0
118 + 119. 4 (210926) got to see the top python programs in the discussion!
198+213: 4
221:4
1585:3
085:0
322:4
877: 4 (20210928)
2024/424:0
2025:1.
220. 2 (how to do BST in python; one way is using SortedList() and bisect_left/right())
174.4
241.2 (understand reg exp and operators)
1140 (stone game II) 2.( the key here in Lee215's solution is to use lrucache in functiontools;a good tutorial on lru cache is:
https://realpython.com/lru-cache-python/)
354 (300) 2.
343 0.
376 0.
1755 0.
673 (number of longest increasing sequence) (20211028). 4
646 4.
354 1. (slick way of 300 LIS)
239 0. (the first comment in https://leetcode.com/problems/sliding-window-maximum/discuss/65885/This-is-a-typical-monotonic-queue-problem leads to 84; 496;503, 581;856,862,901,907,1130)
581. 4(with the mindset of 239)
862. 0 (even with hint of 239)(https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/204290/Monotonic-Queue-Summary)
907.0 
316.0*
456.3
962. 4 on the second try.
769 3 (didn't realize what the right monotonic stack should be).
402 4.
321 0*
670 4
1996 1*
768 3
2195: 0*. https://leetcode.com/problems/append-k-integers-with-minimal-sum/discuss/1823621/Python-Explanation-with-pictures-Binary-Search
2212:0*(20220319) dp/btrack
2209:0* dp
2203:0* dijkstras
2195: 0*
279:4; Solution greedy + BFS
282: 1* https://leetcode.com/problems/expression-add-operators/discuss/572099/C%2B%2BJavaPython-Backtracking-and-Evaluate-on-the-fly-Clean-and-Concise

On Heapq/quickselect idea:
973 3* (look at solution 4, it is a good explanation on finding all k (or the kth) smallest/largest elements using quickselect!)
295 2 (got 2 hp idea).
871 0
1353 0* https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/discuss/1116371/Python-With-detailed-explanation
560 4 (using hint from https://gist.github.com/Windsooon/e663358a6be45a93af2665206c4d4ae9)
410 0* (read the solution!)
341 1* (read the solution! about GENERATORS in python)
1087 3* (see https://leetcode.com/problems/brace-expansion/discuss/314308/Python-3-line-Using-Product; which uses itertools.product and packing & unpacking arguments)
341: 3* used breath first search. Not optimal.
097: 0*
187: 0*
218: 0* using sortedlist, heap, TLE
***************************************Backtracking***************************************
Note that if we were to backtrack; if we want to save anything, we need to save a copy of it; otherwise it will be lost!(see the explanation for 039 combination sum!)
022: 0* : Here the backtradcking is essentially a DFS: https://leetcode.com/problems/generate-parentheses/discuss/10110/Simple-Python-DFS-solution-with-explanation(another way to understand the backtrack official soln).
077/078/040: 4
079: 0* get the conditions logic correct!
051:3* N-Queens 
2179: 3* could use SortedList to get time complexity to nlogn; Could also use Fenwick Tree. Such a beatiful combination of binary tree and bit operation.


***************ToplogicalSort*******************************
207(course schedule): 2* two ideas: a. Kahn's algo in top sort; b. dfs, but need to use 3 colors (states) to denote a node's state


**************design****************************************
146(LRU): 0* (20220419)
380: 0*(20220419)
******************Trie*****************************************
208, implementing Trie 0* 
139: word break: implementing Trie + dfs
212 0* with pruning. See solutions
1268: 2* not sure which part of the test case failed. the following solutions are good though:
a. https://leetcode.com/problems/search-suggestions-system/discuss/1242823/C%2B%2BPython-3-solutions-Clean-and-Concise
b.https://leetcode.com/problems/search-suggestions-system/discuss/508775/Python-Trie-%2B-sort-Trie-%2B-Heap
642: 3
472 2* Still need to use DFS: see https://leetcode.com/problems/concatenated-words/discuss/765634/Python-Trie-solution-explained
or the following dfs with memo solution: https://leetcode.com/problems/concatenated-words/discuss/159348/Python-DFS-readable-solution

**************Union Find*****************************************
130: 4 could also try bfs/dfs
720: 2* The unionfind parents doens't have to be elements themselves; 
can be indices: https://leetcode.com/problems/accounts-merge/discuss/1084738/Python-The-clean-Union-Find-solution-you-are-looking-for

*******************Bit Operations**********************************
look at ith binary digit: n>>i & 1
029: divide integer. 0* Great Solution on binary search core idea!
067 3* Look at the solution; especially bit manipulation part!
137: 0* Bitwise XOR NOT etc. The official solution might come out of nowhere, look at the following two posts:
https://leetcode.com/problems/single-number-ii/discuss/43296/An-General-Way-to-Handle-All-this-sort-of-questions.
https://leetcode.com/problems/single-number-ii/discuss/43295/Detailed-explanation-and-generalization-of-the-bitwise-operation-method-for-single-numbers
260: 0*; there is an operation x & (-x) to tell the last 1 in the binary expressionary of a number. or x&(x-1) to eliminate the last 1.
421 0* bit Trie. 
190: 3* return int(bin(n)[2:].zfill(32)[::-1],2) Don't forget zfill(32)! 
   Still. Look at the solutions for better ideas!!!



================================================================================================================
Special Algo/Data Structure:
*******************Segment Tree**************************
a good explanation: https://www.youtube.com/watch?v=Oq2E2yGadnU&ab_channel=JAlgs;
its accompanying implementation in python:
https://github.com/jakobkogler/Algorithm-DataStructures/blob/master/RangeQuery/SegmentTree.py
*************KMP****************************************
https://leetcode.com/problems/shortest-palindrome/solution/
https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/
https://leetcode.com/problems/shortest-palindrome/discuss/60113/clean-kmp-solution-with-super-detailed-explanation

*********************Boyer-Moore Voting Algorithm**************
https://leetcode.com/problems/majority-element-ii/solution/


*******************************Dijkstras algo***********
problem list: https://leetcode.com/list/53js48ke/

***************binary search*********************
Wei Chen's trick on binary search algo:

# l = mid, r = mid -1 -> mid = l + (r-l+1)//2
# l = mid + 1, r = mid -> mid = l + (r-l)//2
# l = mid +1, r = mid -1 -> mid can be written in either case
# l= mid, r = mid, then loop condition becomes while l < r - 1, after loop, check l and r separately.


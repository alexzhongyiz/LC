0 denotes not understanding idea/optimal idea.

1. denotes understand idea but not finished with programming.
2. denotes understanding idea but couldn't implement independently yet.
3 denotes came up with not super good algo but passed.
4. denotes independendly implementing not too bad algo
5. denotes independently implemented near optimal idea.



005. 2 (210915)
214. 0 (210916) (KMP algo?)
516 2
647 4
055 5.
045. 4.
1306 5
1871.0
118 + 119. 4 (210926) got to see the top python programs in the discussion!
198+213: 4
221:4
1585:3
085:0
322:4
877: 4 (20210928)
2024/424:0
2025:1.
220. 2 (how to do BST in python; one way is using SortedList() and bisect_left/right())
174.4
241.2 (understand reg exp and operators)
1140 (stone game II) 2.( the key here in Lee215's solution is to use lrucache in functiontools;a good tutorial on lru cache is:
https://realpython.com/lru-cache-python/)
354 (300) 2.
343 0.
376 0.
1755 0.
673 (number of longest increasing sequence) (20211028). 4
646 4.
354 1. (slick way of 300 LIS)
239 0. (the first comment in https://leetcode.com/problems/sliding-window-maximum/discuss/65885/This-is-a-typical-monotonic-queue-problem leads to 84; 496;503, 581;856,862,901,907,1130)
581. 4(with the mindset of 239)
862. 0 (even with hint of 239)(https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/204290/Monotonic-Queue-Summary)
907.0 
316.0*
456.3
962. 4 on the second try.
769 3 (didn't realize what the right monotonic stack should be).
402 4.

This is essentially patience sorting: https://en.wikipedia.org/wiki/Patience_sorting! 
Think of it as sorting a deck of cards with PS.
To implement, we get O(nlogn) by using binary search.
https://leetcode.com/problems/longest-increasing-subsequence/discuss/74824/JavaPython-Binary-search-O(nlogn)-time-with-explanation

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        piles = [0]* len(nums)
        piles [0] = nums[0]
        res = 1
        for num in nums:
            i,j = 0,res
            while (i !=j):
                m  = (i+j )//2
                if piles[m] < num:
                    i = m + 1
                else:
                    j = m
            #print(piles)
            
            piles[i] = num
            res = max(i+1,res)
            
        return res

A reasonable C++ solution based on std::lower_bound
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> vec;
        
        for (int i = 0; i < nums.size(); i++){
            auto it = std::lower_bound(vec.begin(),vec.end(),nums[i]);
            if (it == vec.end()) vec.push_back(nums[i]);
            else *it = nums[i];
        }
        return vec.size();
    }
};

#solution by 公瑾
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        N = len(nums)
        dp = [0] * N
        for i in range(N):
            for j in range(i):
                if nums[j] < nums[i]:
                    dp[i] = max(dp[i], dp[j] + 1)
        return max(dp)
  
#dp[i] denote the length of LIS that ends in position i.

or this faster :

    def lengthOfLIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        N = len(nums)
        dp = [0]*N
        for i in range(N):
            dp[i] = max( [dp[j] + 1  for j in range(i) if nums[j] < nums[i] ], default = 1)
        return max(dp)


My solution on Dec 20 (similar idea to that of before)

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        res = 0 if len(nums) == 0 else 1
        dic = collections.defaultdict(int)
        dic [0] = 1
    
        for i in range(1, len(nums)):
            cur = 0
            for j in range(i-1,-1,-1):
                if nums[j] < nums[i] and dic[j] > cur:
                    cur = dic[j]
            dic[i] = cur + 1
            res = max(res, dic[i])
        
        return res
            

My solution with a dictionary to keep track: not good for time complexity:

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        if (n==1) {
            vector<string> ans {"()"};
            return ans;
        }
        map<int, unordered_set<string>> dict;
        dict[1] = unordered_set<string> {"()"};
        
        unordered_set<string> res;
        for (int i = 2; i <= n; i++){
            for (int j = 1; j < i; ++j){
    
                for (auto str: dict[j]){
                    
                    for (auto str2: dict[i-j]){
                        if(j==1){
                            res.insert("(" + str2 + ")");
                        }
                        res.insert(str + str2); 
                    }
            

                }
            }
            dict[i] = res;
            res.clear();
        }
        
        return vector<string> (dict[n].begin(), dict[n].end());
        
    }
};

The comments have really good ones with better time complexity.

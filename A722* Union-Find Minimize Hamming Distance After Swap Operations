class Solution:
    
    class UnionFind:
        
        def __init__(self,n):
            self.root = [i for i in range(n)]
        
        def union (self, x, y):
            self.root[self.find(x)] = self.find(y)
            
        def find(self,x):
            if self.root[x] != x:
                return self.find(self.root[x])
                #self.root[x] = self.find(self.root[x])
            return self.root[x]
    
    
    
    def minimumHammingDistance(self, source: List[int], target: List[int], allowedSwaps: List[List[int]]) -> int:
        uf = self.UnionFind(len(source))
        for a, b in allowedSwaps:
            uf.union(a,b)
        m = collections.defaultdict(set)
        for i in range(len(source)):
            m[uf.find(i)].add(i)
        
        dist = 0
        for k, cluster in m.items():
            #print(k,cluster)
            scl, tcl = [source[i] for i in cluster], [target[i] for i in cluster]
            #print(scl, tcl)
            sc, tc = collections.Counter(scl), collections.Counter(tcl)
            #print(sc, tc, sc -tc)
            dist += sum((sc - tc).values())
            
            
        #dist += sum(source[i]!=target[i] for i in range(n) if not vi[i])
        return dist
                
        
        

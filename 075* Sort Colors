Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
def sortColors(self, nums: List[int]) -> None:
a = b = c = 0
        for num in nums:
            if num ==0:
                a+= 1
            elif num ==1:
                b+= 1
            else:
                c+= 1
        nums[:a]= [0]*a
        nums[a:b + a] = [1]*b
        nums[a + b:] = [2]*c

Could you come up with a one-pass algorithm using only constant space?
See solution

 def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        p0 = cur = 0
        p2 = len(nums) - 1
        while cur <= p2:  #here can't be simply less than. as nums[p2] might be 0.
            if nums[cur] == 0:
                nums[cur], nums[p0] = nums[p0], nums[cur]
                p0 += 1
                cur += 1
            elif nums[cur] == 2:
                nums[cur], nums[p2] = nums[p2], nums[cur]
                p2 -= 1
            else:
                cur += 1
                

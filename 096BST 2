#recursive:
 def generateTrees(self, n: int) -> List[TreeNode]:
        if n == 0: return []
        return self.helper([i for i in range(1, n + 1)])
    
    
    
    def helper(self, lst):
        if len(lst) == 0:
            return [None]
        ans = []
        for i in range(0, len(lst) ):
            for left in self.helper(lst[: i]):
                for right in self.helper(lst[i+1:]):
                    node, node.left, node.right = TreeNode(lst[i]), left, right
                    ans += [node]
        return ans
        
        #DP: Don't start from the middle index; rather dynamic on the largest index(i) in the next code
        # then go backwards for dp[j][i] for j from i-1 back to 1. Now the intermidiate node k can go from j to i
    def generateTrees(self, n):
    if n == 0:
        return [None]
    tree_list = [[[None]] * (n + 2) for i in range(n + 2)]
    for i in range(1, n + 1):
        tree_list[i][i] = [TreeNode(i)]
        for j in reversed(range(1, i)):
            tree_list[j][i] = []
            for k in range(j, i + 1):
                for left in tree_list[j][k - 1]:
                    for right in tree_list[k + 1][i]:
                        root = TreeNode(k)
                        (root.left, root.right) = (left, right)
                        tree_list[j][i].append(root)
    return tree_list[1][n]
          

This uses global variable, note to make it global we need to declare it both outside and inside the dfs function

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = collections.defaultdict(list)
        for pre in prerequisites:
            graph[pre[0]].append(pre[1])
        
        visited = [0]* numCourses
        stack = []
        global flag
        flag = 1
        
        def topsort(v):
            global flag
            
            if visited[v] == -1:
                flag = 0
                return
            if visited[v] == 0:
                visited[v] = -1

                for u in graph[v]:
                    if visited[u] == -1:
                        
                        flag = 0
                        return
                    if visited[u] == 0:
                        topsort(u)

                stack.append(v)
                visited[v] = 1
                
        
        for v in range(numCourses):
            if visited[v] == 0:
                topsort(v)
        return stack if flag == 1 else []
        
        
#A much neater program on solutions:

class Solution:
    # @param {integer} numCourses
    # @param {integer[][]} prerequisites
    # @return {integer[]}
    def findOrder(self, numCourses, prerequisites):
        # use DFS to parse the course structure
        self.graph = collections.defaultdict(list) # a graph for all courses
        self.res = [] # start from empty
        for pair in prerequisites:
            self.graph[pair[0]].append(pair[1]) 
        self.visited = [0 for x in xrange(numCourses)] # DAG detection 
        for x in xrange(numCourses):
            if not self.DFS(x):
                return []
             # continue to search the whole graph
        return self.res
    
    def DFS(self, node):
        if self.visited[node] == -1: # cycle detected
            return False
        if self.visited[node] == 1:
            return True # has been finished, and been added to self.res
        self.visited[node] = -1 # mark as visited
        for x in self.graph[node]:
            if not self.DFS(x):
                return False
        self.visited[node] = 1 # mark as finished
        self.res.append(node) # add to solution as the course depenedent on previous ones
        return True

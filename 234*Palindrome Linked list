Want to have O(1) space!

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head:
            return True
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        cur = slow
        node = None
        nxt = cur.next
        cur.next = node
        while nxt:
            node = cur
            cur = nxt
            nxt = cur.next
            cur.next = node
        while head and head!= slow:
            if head.val != cur.val:
                return False
            else:
                head = head.next
                cur = cur.next
        return True
        

A simpler implementation:

def isPalindrome(self, head):
    fast = slow = head
    # find the mid node
    while fast and fast.next:
        fast = fast.next.next
        slow = slow.next
    # reverse the second half
    node = None
    while slow:
        nxt = slow.next
        slow.next = node
        node = slow
        slow = nxt
    # compare the first and second half nodes
    while node: # while node and head:
        if node.val != head.val:
            return False
        node = node.next
        head = head.next
    return True

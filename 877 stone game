my not very space efficient DP:
idea is that if we have k piles now, for whoever starts, the best net gain (mine - opponent)for piles is 
max (piles[0] - net_gain(piles[1:], piles[-1] - net_gain(piles[:len(piles)-1]); thus use a 2 d dp.


def stoneGame(self, piles: List[int]) -> bool:
        dp = []
        dp.append([0]*(len(piles)+1))
        for i in range(1,len(piles)+1):
            leni = []
            for j in range(len(piles)-i+1):
                leni.append(max(piles[j]-dp[i-1][j+1],piles[j-1+i]-dp[i-1][j]))
            dp.append(leni)
            #print(i,leni)
        return True if dp[-1][0]>0 else False

My thought: not very concise though.

def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        
        dp =[[(0,0,0) for _ in range(len(matrix[0]) + 1)] for _ in range(len(matrix) + 1)]
            
        #tuple, first denote the longest square of 1 with lower right corner i,j
        #2nd denote the longest array of 1 vertical on top of i,j
        #3nd horizonal, left
        ans = 0
        for i in range(1,len(matrix) + 1):
            for j in range(1,len(matrix[0]) + 1):
                if matrix[i - 1][j - 1] == '1':
                    v = dp[i -1][j][1] + 1
                    h = dp[i][j -1][2] + 1
                    a = min(dp[i -1][j-1][0] + 1, v, h)
                    dp[i][j] = (a, v,h)
                    ans = max(ans, a)
        print(dp)
        return ans**2
        
        
 Hint: can do this using only 1 parameter for each dp[i][j], thus also make dp O(m)...


On 20210926; we work on the length of the square: first length = 1 (as long as there is one "1" in the matrix). 
second, assuming we have square of length l-1 with upper left corner (i,j), then if we have square of length l-1 with upper left corner
(i,j+1),(i+1,j) and (i+1,j+1) we will be good to have square of length l with upper corner (i,j). Thus for every length we only
need to test from 0 to  len(matrix) -l and 0 to len(matrix[0]) -l for a length l square:

    def maximalSquare(self, matrix: List[List[str]]) -> int:
        M,N = len(matrix),len(matrix[0])
        if not M or not N:
            return 0
        if not sum([int(matrix[i][j]) for i in range(M) for j in range(N)]):
            return 0
                
        l = 1
        
        while l <= min(M,N):
            exist = False
            for i in range(M-l):
                for j in range(N-l):
                    if matrix[i][j] =="1" and matrix[i][j+1]=="1" and matrix[i+1][j]=="1" and matrix[i+1][j+1]=="1":
                        
                        exist = True
                    else:
                        matrix[i][j]= '*'
            if not exist:
                return l*l
            #print(l,matrix)
            l+= 1
        return l*l

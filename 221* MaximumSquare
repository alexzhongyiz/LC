My thought: not very concise though.

def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        
        dp =[[(0,0,0) for _ in range(len(matrix[0]) + 1)] for _ in range(len(matrix) + 1)]
            
        #tuple, first denote the longest square of 1 with lower right corner i,j
        #2nd denote the longest array of 1 vertical on top of i,j
        #3nd horizonal, left
        ans = 0
        for i in range(1,len(matrix) + 1):
            for j in range(1,len(matrix[0]) + 1):
                if matrix[i - 1][j - 1] == '1':
                    v = dp[i -1][j][1] + 1
                    h = dp[i][j -1][2] + 1
                    a = min(dp[i -1][j-1][0] + 1, v, h)
                    dp[i][j] = (a, v,h)
                    ans = max(ans, a)
        print(dp)
        return ans**2
        
        
 Hint: can do this using only 1 parameter for each dp[i][j], thus also make dp O(m)...

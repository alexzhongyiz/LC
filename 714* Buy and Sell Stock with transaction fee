#my first attempt: guess it was wrong:

 min_left = prices[0] + fee
        cur_max = prices[0]
        ans = 0
        for i in range (1, len(prices)):
            if prices[i] - cur_max <= fee * (-1) and cur_max > min_left:
                ans += cur_max - min_left
                print("sell at %1d, bought at %1d, current profit is %1d"%(cur_max, min_left -fee, ans))
                min_left = prices[i] + fee
                cur_max = prices[i]
                
            else:
                cur_max = max (prices[i], cur_max)
                min_left = min (min_left, prices[i] + fee)
        print("last sell at %1d, bought at %1d"%(cur_max, min_left -fee))
        return ans + max(cur_max - min_left, 0)
        
        
 O(n^2) TLE:
 #idea is to put dp[i] to be profits where sell on day i and not sell on day i.
 def maxProfit(self, prices: List[int], fee: int) -> int:
        if len(prices)<= 1:
            return 0
        if len(prices) == 2:
            return max(prices[1] - prices[0] - fee, 0)
        dp = [(0,0)]*len(prices)
        dp[0] = (-fee, 0)
        dp[1] = (max(prices[1] - prices[0], 0) - fee, 0)
        for i in range(2, len(prices)):
            sell = max(max(dp[j][0] + prices[i] -prices[j] for j in range(i)), prices[i] - prices[i -1] - fee + dp[i -1][1])
            not_sell = max(dp[i -1][0], dp[i -1][1])
            dp[i] = (sell, not_sell)
        #print(dp)
        return max(dp[-1])
       
 What about state machine with two states: hold the stock vs only cash at hand
 hold is the cash amount while holding the stock;
 O(n) time, O(2n) space.
 class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        #turns out the following block is not needed
        if len(prices)<= 1:
            return 0
        if len(prices) == 2:
            return max(prices[1] - prices[0] - fee, 0)
            
        hold = [0]*len(prices)
        cash = [0]*len(prices)
        hold[0] = -prices[0] - fee
        cash[0] = 0
        for i in range(1, len(prices)):
            hold[i] = max(cash[i -1] - prices[i] - fee, hold[i -1])
            cash[i] = max(hold[i - 1] + prices[i], cash[i -1])
        #print(hold, cash)
        return cash[-1]

can reduce to O(1) space:
def maxProfit(self, prices: List[int], fee: int) -> int:

        hold = -prices[0] - fee
        cash = 0
        for i in range(1, len(prices)):
            hold, cash = max(cash - prices[i] - fee, hold),max(hold + prices[i], cash)   
        #print(hold, cash)
        return cash
        
        
 

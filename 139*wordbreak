TLE try: essentially O(2^n) time:

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        if (!s.size()) return true;
        bool res = false;
        for (int i = 1;i<=s.size();i++){
            cout<<s.substr(0,i)<<"\t";
            if (find(wordDict.begin(),wordDict.end(),s.substr(0,i) )!= wordDict.end()){
                res = wordBreak(s.substr(i,s.size() - i), wordDict) ? true : res;
            }     
        }
        return res;
    }
};

DP:
def wordBreak(self, s: str, wordDict: List[str]) -> bool:
  dp =[0]*(len(s) + 1)
  for i in range(1,len(s) + 1):
      for j in range(i):
        if s[j:i] in wordDict and dp[j]:
          dp[i] = True
          break
  return dp[-1]
        



BFS solution by someone else:

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        from collections import deque
   		q = deque([s])
		seen = set() 
		while q:
            s = q.popleft()    # popleft() = BFS ; pop() = DFS
            for word in wordDict:
                if s.startswith(word):
                    new_s = s[len(word):]
					if new_s == "": 
                        return True
                    if new_s not in seen:
                        q.append(new_s)
                        seen.add(new_s)
        return False

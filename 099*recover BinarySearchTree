
class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        def inorder(root:TreeNode):
            if not root:
                return []
            res = inorder(root.left)
            res.append(root)
            res.extend(inorder(root.right))
            return res
            
        nodes = inorder(root)
        for i in range(len(nodes) - 1):
            if nodes[i].val > nodes[i + 1].val:
                first = i
                break
        for j in range(first, len(nodes) - 1):
            if nodes[j].val > nodes[j+ 1].val:
                second = j + 1
                
        temp = nodes[first].val     
        nodes[first].val  = nodes[second].val     
        
        nodes[second].val  = temp
        
        
        #their solutions:
def recoverTree(self, root):
    it = self.isValidBST(root)
    a, b = next(it)
    c = next(it, None) # when the generator finishes iteration yet can't meet the stopping criterion, a default can be given.
                       # Here the default is c = None
    if c:
        _, x = c
        a.val, x.val = x.val, a.val
    else:
        a.val, b.val = b.val, a.val
    return root

def isValidBST(self, root):
    pre, cur, stack = None, root, []
    while stack or cur:
        while cur:
            stack.append(cur)
            cur = cur.left
        s = stack.pop()
        if pre and s.val <= pre.val:
            yield pre, s
        pre, cur = s, s.right

        
        
            

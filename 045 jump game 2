O(n2) time, O(n) space:

def jump(self, nums: List[int]) -> int:
        sh= [float("inf")]*len(nums)
        sh[0] = 0
        for i in range(len(nums)):
            for j in range(i+1,i + nums[i] +1):
                if j < len(nums):
                    
                    sh[j] = min(sh[j],sh[i]+1)
                    #print(i,j,sh)
        return sh[-1]
 
 For best solution in time & space: 
 https://leetcode.com/problems/jump-game-ii/discuss/1192457/JavaPython-DP-Greedy-Solutions-Time%3A-O(N)-Space%3A-O(1)
 https://leetcode.com/problems/jump-game-ii/discuss/1192401/Easy-Solutions-w-Explanation-or-Optimizations-from-Brute-Force-to-DP-to-Greedy-BFS

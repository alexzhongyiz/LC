TLE for the following: 
def numSquares(self, n: int) -> int:
        squares = set()
        i = 1
        while i*i <= n:
            squares.add(i*i)
            i += 1
            
        def numsquares(squares, m):
            if m in squares:
                return 1
            elif m > 0:
                return min(numsquares(squares, m - sq) for sq in squares if m - sq > 0)
            
        
        return numsquares(squares, n)
        
        
 TLE for dp with time complexity O(\sqrt(n) * n):
 def numSquares(self, n: int) -> int:
        squares = []
        i = 1
        while i*i <= n:
            squares.append(i*i)
            i +=1
            
        
        seen =[0]*(n + 1)
        seen[1] = 1
        for i in range(2,n + 1):
            seen[i] = min(seen[i - sq] for sq in squares if i - sq >= 0) + 1
        #print(seen)
        return seen[-1]
     
Another DP solution would be as follows: it works in C, but TLE in python:
def numSquares(self, n):
        dp = [0]* (n + 1)
        for i in range(n + 1):
            dp[i] = i
            for j in range(1, int(math.sqrt(i)) + 1 ):
                dp[i] = min(dp[i - j*j] + 1, dp[i])
        
        return dp[n]
The only solution is BFS, as shown in here:https://leetcode.com/problems/perfect-squares/discuss/71475/Short-Python-solution-using-BFS
def numSquares(self, n):
    if n < 2:
        return n
    lst = []
    i = 1
    while i * i <= n:
        lst.append( i * i )
        i += 1
    cnt = 0
    toCheck = {n}
    while toCheck:
        cnt += 1
        temp = set()
        for x in toCheck:
            for y in lst:
                if x == y:
                    return cnt
                if x < y:
                    break
                temp.add(x-y)
        toCheck = temp

    return cnt

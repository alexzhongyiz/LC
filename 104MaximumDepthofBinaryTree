#simple recursion, return the max of children + 1:
def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        return max(self.maxDepth(root.left), self.maxDepth(root.right) ) + 1
        
        
        
#using iteration and stack:

def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        stack =[]
        ans = 0
        root_level = 1
        while root or stack:
            if root:
                ans = max(ans, root_level)
                if root.right:
                    stack.append((root.right, root_level + 1))
                root = root.left
                root_level += 1
                
            else:
                root, root_level = stack.pop()
                
        return ans        

#DFS with stack:

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        stack =[(root, 1)]
        ans = 1
        while stack:
            node, depth = stack.pop()
            if node:
                ans = max(ans, depth)
                stack.append((node.right, depth + 1))
                stack.append((node.left, depth + 1))
            #print([n.val for n, _ in stack if n])
        return ans

#BFS with queue:
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        
    
        if not root:
            return 0
        queue = [(root, 1)]
        ans = 1
        while queue:
            node, depth = queue.pop(0)
            if node:
                ans = max(ans, depth)
                queue.append((node.left, depth + 1))
                queue.append((node.right, depth + 1))
        return ans
